{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","iFrames","setiFrames","iFrame","setiFrame","isStorageRetrieved","setStorageRetrieved","useEffect","frames","i","frame","localStorage","getItem","console","log","push","style","width","height","display","flexDirection","padding","boxSizing","justifyContent","type","value","onChange","e","target","onClick","length","setItem","map","index","document","getElementById","toString","getElementsByTagName","src","refresh","newFrames","replace","clear","flexGrow","flexWrap","count","IFrameContainer","props","id","backgroundColor","flexShrink","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"mOA6HeA,MA1Hf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACRC,EADQ,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAERG,EAFQ,KAEAC,EAFA,OAGmCJ,oBAAS,GAH5C,mBAGRK,EAHQ,KAGYC,EAHZ,KAkDb,OA7CAC,qBAAU,WACR,IAAIF,EAAJ,CAKA,IADA,IAAIG,EAAS,GACJC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAQC,aAAaC,QAAb,eAA6BH,IACzCI,QAAQC,IAAIJ,GACC,MAATA,GAGFF,EAAOO,KAAKL,GAGhBR,EAAWM,GACXF,GAAoB,MACnB,CAACD,IA6BF,sBACEW,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,QAAS,OACTC,UAAW,cAPf,UAUE,sBACEN,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTI,eAAgB,SAChBF,QAAS,OACTC,UAAW,cAPf,UAUE,uBACEE,KAAK,OACLC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAOvB,EAAUuB,EAAEC,OAAOH,UAGtC,wBAAQI,QAAS,WApDjB5B,EAAQ6B,OAAS,IACnBnB,aAAaoB,QAAb,eAA6B9B,EAAQ6B,QAAU3B,GAC/CD,EAAW,GAAD,mBAAKD,GAAL,CAAcE,OAkDtB,iBACCF,EAAQ+B,KAAI,SAACtB,EAAOuB,GACnB,OACE,qCACE,yBAAQJ,QAAS,kBAlD7B,SAAiBpB,GACf,IAAIN,EAAS+B,SAASC,eAAe1B,EAAE2B,YAEzB,MAAVjC,KAGFA,EAASA,EAAOkC,qBAAqB,UAAU,IACxCC,KAAO,IA2CiBC,CAAQN,IAA/B,qBACWA,EAAQ,KAEnB,yBAAQJ,QAAS,kBA1C7B,SAAiBpB,GACfE,aAAaoB,QAAb,eAA6BtB,GAAKN,GAClC,IAAIqC,EAAYvC,EAChBuC,EAAU/B,GAAKN,EACfU,QAAQC,IAAI0B,GACZtC,EAAWsC,GAqCsBC,CAAQR,IAA/B,qBACWA,EAAQ,WAKzB,wBACEJ,QAAS,WACPlB,aAAa+B,QACbxC,EAAW,KAHf,oCASF,qBACEc,MAAO,CACL2B,SAAU,EACVxB,QAAS,OACTC,cAAe,MACfwB,SAAU,OACV1B,OAAQ,QANZ,SASGjB,EAAQ+B,KAAI,SAACtB,EAAOuB,GACnB,OACE,cAAC,EAAD,CACE9B,OAAQO,EACRmC,MAAO5C,EAAQ6B,OACfG,MAAOA,aAWfa,EAAkB,SAACC,GACvB,OACE,qBACEC,GAAID,EAAMd,MACVjB,MAAO,CACLC,MAAO8B,EAAMF,MAAQ,EAAI,MAAQ,OACjC3B,OAAQ6B,EAAMF,MAAQ,EAAI,MAAQ,OAClCI,gBAAiB,QACjBN,SAAU,EACVO,WAAY,GAEdC,wBAAyB,CAAEC,OAAQL,EAAM5C,WC9HhCkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAASC,eAAe,SAM1BkB,M","file":"static/js/main.d1199406.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  let [iFrames, setiFrames] = useState([]);\n  let [iFrame, setiFrame] = useState(\"\");\n  let [isStorageRetrieved, setStorageRetrieved] = useState(false);\n\n  useEffect(() => {\n    if (isStorageRetrieved) {\n      return;\n    }\n\n    let frames = [];\n    for (let i = 0; i < 4; i++) {\n      let frame = localStorage.getItem(`frame${i}`);\n      console.log(frame);\n      if (frame == null) {\n        continue;\n      } else {\n        frames.push(frame);\n      }\n    }\n    setiFrames(frames);\n    setStorageRetrieved(true);\n  }, [isStorageRetrieved]);\n\n  function addiFrame() {\n    if (iFrames.length < 4) {\n      localStorage.setItem(`frame${iFrames.length}`, iFrame);\n      setiFrames([...iFrames, iFrame]);\n    }\n  }\n\n  function refresh(i) {\n    let iFrame = document.getElementById(i.toString());\n\n    if (iFrame == null) {\n      return;\n    } else {\n      iFrame = iFrame.getElementsByTagName(\"iFrame\")[0];\n      iFrame.src += \"\";\n    }\n  }\n\n  function replace(i) {\n    localStorage.setItem(`frame${i}`, iFrame);\n    let newFrames = iFrames;\n    newFrames[i] = iFrame;\n    console.log(newFrames);\n    setiFrames(newFrames);\n  }\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: \"10px\",\n        boxSizing: \"border-box\",\n      }}\n    >\n      <div\n        style={{\n          width: \"100%\",\n          height: \"50px\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          padding: \"10px\",\n          boxSizing: \"border-box\",\n        }}\n      >\n        <input\n          type=\"text\"\n          value={iFrame}\n          onChange={(e) => setiFrame(e.target.value)}\n        />\n\n        <button onClick={() => addiFrame()}>ADD</button>\n        {iFrames.map((frame, index) => {\n          return (\n            <>\n              <button onClick={() => refresh(index)}>\n                Refresh {index + 1}\n              </button>\n              <button onClick={() => replace(index)}>\n                Replace {index + 1}\n              </button>\n            </>\n          );\n        })}\n        <button\n          onClick={() => {\n            localStorage.clear();\n            setiFrames([]);\n          }}\n        >\n          Clear Frame Storage\n        </button>\n      </div>\n      <div\n        style={{\n          flexGrow: 1,\n          display: \"flex\",\n          flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          height: \"100%\",\n        }}\n      >\n        {iFrames.map((frame, index) => {\n          return (\n            <IFrameContainer\n              iFrame={frame}\n              count={iFrames.length}\n              index={index}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst IFrameContainer = (props) => {\n  return (\n    <div\n      id={props.index}\n      style={{\n        width: props.count > 1 ? \"50%\" : \"100%\",\n        height: props.count > 2 ? \"50%\" : \"100%\",\n        backgroundColor: \"black\",\n        flexGrow: 0,\n        flexShrink: 0,\n      }}\n      dangerouslySetInnerHTML={{ __html: props.iFrame }}\n    ></div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}